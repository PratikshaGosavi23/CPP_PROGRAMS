QUE:You are given an array of integers nums and an integer target.
Return indices of the two numbers such that they add up to the target.

You may assume that each input has exactly one solution, and you cannot use the same element twice.

Example
Input:  nums = [2, 7, 11, 15], target = 9
Output: [0, 1]   (because nums[0] + nums[1] = 2 + 7 = 9)



//CODE
#include <iostream>
#include <vector>
using namespace std;

vector<int> twoSum(vector<int>& nums, int target) {
    // Check every pair of numbers
    for (int i = 0; i < nums.size(); i++) {
        for (int j = i + 1; j < nums.size(); j++) {
            // If they add up to target, return their indices
            if (nums[i] + nums[j] == target) {
                vector<int> result;
                result.push_back(i);
                result.push_back(j);
                return result;
            }
        }
    }
    // If no solution (though problem guarantees one)
    return vector<int>();
}

int main() {
    vector<int> nums;
    nums.push_back(2);
    nums.push_back(7);
    nums.push_back(11);
    nums.push_back(15);

    int target = 9;

    vector<int> ans = twoSum(nums, target);

    cout << "[" << ans[0] << ", " << ans[1] << "]" << endl;

    return 0;
}
